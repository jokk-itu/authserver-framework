import{t as s,h as E,a as r,b as $}from"../chunks/BdD32qd5.js";import"../chunks/BOyCDzPS.js";import{p as B,f as p,a as L,$ as G,s as o,n as l}from"../chunks/Db0b_LWK.js";import{i as M}from"../chunks/hXpMuBZJ.js";import{C as I}from"../chunks/Dg6GzD5d.js";import{P as V,S as a}from"../chunks/DcIxqC40.js";import{T as c,R as e}from"../chunks/BL1phRJf.js";var Q=s(`<p>The token endpoint, in general terms, is used to get access tokens through grants.
        The grants are identified through a grant type. The supported grant types are listed in Table 1.</p> <br> <!>`,1),Z=s(`<p>The tokens returned can be in different formats. The supported formats are JWT or Reference.</p> <br> <p>JWT is a well structured token format using JSON, and it supports signatures and encryption.</p> <br> <p>Reference is a random string, which is only understood by AuthServer. The content of the token, can be retrieved from the Introspection endpoint.</p> <br> <p>The client can choose between the two in its metadata, through the field "UseReferenceToken".</p> <p>If bandwidth of the client is of concern, or you require the content of token is only send through backchannels, then the Reference token is a suitable candidate.
        It however requires an extra roundtrip at the protected resource, to verify the token at AuthServer.</p> <br> <p>Finally, it is also possible to sender-constraint a token, irrespective of its structure.</p> <p>It means the token is cryptographically bound to the client that requested the token, and therefore can only be used by that client.</p> <p>This is achievable through DPoP.</p>`,1),K=s(`<p>It is recommended that tokens have a short lifespan, in minutes and at most an hour.</p> <p>This can be adjusted for each client in its metadata. Each type of token, has a specific field for adjusting its expiration.</p> <br> <p>It is recommended that tokens are only used at protected resources, which the client requests.</p> <p>This is done through the "resource" parameter, which is a single protected resource absolute base URI.
        The parameter can be provided as many times as needed, and the URI is visible in the audience claim.</p> <p>For example if a protected resource URI is reachable at "https://weather.authserver.dk", then that URI will be provded as the resource parameter.</p> <br> <p>It is recommended that tokens are only used for what they request.</p> <p>This is done through the "scope" parameter, which is a space seperated string of scopes that the token is authorized for.</p> <p>For example if a token must be used to fetch data about the weather, and the scope required for requesting weather is named "weather:read".
        Then the scope parameter will be set to "weather:read".</p>`,1),X=s("<p>Structured access tokens contain payload claims listed in the following table.</p> <!>",1),Y=s("<p>Id tokens contain payload claims listed in the following table.</p> <!>",1),ee=s("<p>The token endpoint accepts the POST HTTP method, and the content is application/x-www-form-urlencoded.</p> <p>The endpoint also allows for client authentication, and the parameters are defined in the Client Authentication page.</p> <p>The content differs by which grant_type is provided, a list of all parameters is seen in the following table.</p> <!> <br> <p>The token endpoint returns HTTP 200 if successful, and 400 if an error occurred.</p> <p>The content is application/json, and a list of all parameters is seen in the following table.</p> <!> <br> <p>HTTP request examples are provided for each grant type, as each request and response differs depending on the grant type used.</p> <p>However, the error does not differ, and the following request example shows an error scenario.</p> <!> <p>The following HTTP example shows the error response.</p> <!>",1),te=s("<!> <!> <!> <!> <!> <!> <!> <!>",1);function ce(x,C){B(C,!1);let z=["Name","Description"],R=[[new e("Authorization Code"),new e("Use a code in exchange of tokens.")],[new e("Refresh Token"),new e("Use a refresh token in exchange of tokens.")],[new e("Client Credentials"),new e("Use client authentication in exchange of tokens.")]],P=["Name","Description"],q=[[new e("OAuth2.1","https://datatracker.ietf.org/doc/draft-ietf-oauth-v2-1/"),new e("Core specification for OAuth")],[new e("OpenId Connect","https://openid.net/specs/openid-connect-core-1_0.html"),new e("Core specification for OpenId Connect")],[new e("JWT","https://datatracker.ietf.org/doc/html/rfc7519"),new e("JsonWebToken specification")],[new e("JWS","https://datatracker.ietf.org/doc/html/rfc7515"),new e("JsonWebSignature specification")],[new e("JWE","https://datatracker.ietf.org/doc/html/rfc7516"),new e("JsonbWebEncryption specification")],[new e("Resource","https://datatracker.ietf.org/doc/html/rfc8707/"),new e("Resource indicators specification")],[new e("Step up authentication","https://datatracker.ietf.org/doc/html/rfc9470/"),new e("Step up authentication specification")]],S=["Name","Description"],U=[[new e("jti"),new e("Unique identifier of the token")],[new e("scope"),new e("String of space delimited scope values, which the token is authorized for")],[new e("aud"),new e("List of URIs of resources, which are authorized to receive the token")],[new e("grant_id"),new e("Unique identifier of the grant, which the token is authorized through")],[new e("sub"),new e("Identifier of the subject, which the token acts from")],[new e("sid"),new e("Identifier of the session, which the subject owns")],[new e("client_id"),new e("Identifier of the client, which requested the token")],[new e("auth_time"),new e("Unix time of the subjects authentication")],[new e("acr"),new e("String of the authentication context reference from when the subject authenticated")],[new e("access_control"),new e("Custom object of permission claims belonging to the subject")]],j=["Name","Description"],D=[[new e("jti"),new e("Unique identifier of the token")],[new e("nonce"),new e("Client provided nonce during authorization")],[new e("aud"),new e("List of URIs of resources, which are authorized to receive the token")],[new e("grant_id"),new e("Unique identifier of the grant, which the token is authorized through")],[new e("sub"),new e("Identifier of the subject, which the token acts from")],[new e("sid"),new e("Identifier of the session, which the subject owns")],[new e("client_id"),new e("Identifier of the client, which requested the token")],[new e("auth_time"),new e("Unix time of the subjects authentication")],[new e("acr"),new e("String of the authentication context reference from when the subject authenticated")],[new e("amr"),new e("List of strings of the authentication method references from when the subject authenticated")],[new e("azp"),new e("Identifier of the client, which is the authorized party")]],H=["Name","Description"],N=[[new e("grant_type"),new e("The type of grant to authorize for an exchange of a token")],[new e("code"),new e("The authorization_code grant which is used in the authorization_code grant type")],[new e("code_verifier"),new e("The value to verify against the code_challenge provided during authorization")],[new e("redirect_uri"),new e("The redirect_uri provided during authorization")],[new e("refresh_token"),new e("The refresh_token grant which is used in the refresh_token grant type")],[new e("scope"),new e("The scope which the token is authorized for")],[new e("resource"),new e("The resource URIs which the token is authorized to")]],F=["Name","Description"],J=[[new e("access_token"),new e("The access token in exchange of the grant")],[new e("refresh_token"),new e("The refresh token, if the client is authorized for the refresh_token grant_type")],[new e("id_token"),new e("The id token, if the grant_type is used with openid")],[new e("expires_in"),new e("Unix time of when the access_token expires")],[new e("scope"),new e("Space delimitied string of scopes, which the access_token is authorized for")],[new e("grant_id"),new e("The identifier of the grant, from where the access_token comes from.")],[new e("error"),new e("The code of the error")],[new e("error_description"),new e("The description of the error")]];M();var u=te();E(n=>{G.title="Token Endpoint"});var w=p(u);V(w,{title:"Token"});var m=o(w,2);a(m,{title:"Introduction",children:(n,h)=>{var t=Q(),i=o(p(t),4);c(i,{title:"Grant types",tableNumber:1,headers:z,rowCellDefinitions:R}),r(n,t)},$$slots:{default:!0}});var g=o(m,2);a(g,{title:"Specifications",children:(n,h)=>{c(n,{title:"Specifications",tableNumber:2,headers:P,rowCellDefinitions:q})},$$slots:{default:!0}});var k=o(g,2);a(k,{title:"Token structure",children:(n,h)=>{var t=Z();l(22),r(n,t)},$$slots:{default:!0}});var T=o(k,2);a(T,{title:"Fine grained tokens",children:(n,h)=>{var t=K();l(18),r(n,t)},$$slots:{default:!0}});var b=o(T,2);a(b,{title:"Access token claims",children:(n,h)=>{var t=X(),i=o(p(t),2);c(i,{title:"Access token claims",tableNumber:3,headers:S,rowCellDefinitions:U}),r(n,t)},$$slots:{default:!0}});var _=o(b,2);a(_,{title:"Id token claims",children:(n,h)=>{var t=Y(),i=o(p(t),2);c(i,{title:"Id token claims",tableNumber:4,headers:j,rowCellDefinitions:D}),r(n,t)},$$slots:{default:!0}});var W=o(_,2);a(W,{title:"Token Endpoint",children:(n,h)=>{var t=ee(),i=o(p(t),6);c(i,{title:"Token request parameters",tableNumber:5,headers:H,rowCellDefinitions:N});var v=o(i,8);c(v,{title:"Token response parameters",tableNumber:6,headers:F,rowCellDefinitions:J});var y=o(v,8);I(y,{children:(f,O)=>{l();var d=$();d.nodeValue=`
POST /connect/token HTTP/1.1
Host: idp.authserver.dk
Content-Type: application/x-www-form-urlencoded
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW

grant_type=invalid_grant_type
        `,r(f,d)},$$slots:{default:!0}});var A=o(y,4);I(A,{children:(f,O)=>{l();var d=$();d.nodeValue=`
HTTP/1.1 400 BadRequest
Content-Type: application/json;charset=UTF-8
Cache-Control: no-cache, no-store

{
  "error":"unsupported_grant_type",
  "error_description":"grant_type is unsupported"
}
        `,r(f,d)},$$slots:{default:!0}}),r(n,t)},$$slots:{default:!0}}),r(x,u),L()}export{ce as component};
